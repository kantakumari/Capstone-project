pipeline {
    agent any
    tools {
       terraform 'terraform'
    }
    environment {
        CHART_NAME = 'nginx-service'        
    }
    stages {
        stage('Poll Code Repository') {
            steps {
                git credentialsId: 'git-token', url: 'git@github.com:kantakumari/Capstone-project.git'
            }
        }
        stage('Terraform Init') {
            when {
                expression{action == "apply"}
            }
            steps{
               script {
                    dir('aks-cluster-infrastructure/') {
                        sh 'terraform init'
                    }
                }
            }            
        }
        stage('Terraform Syntax Check') {
            when {
                expression{action == "apply"}
            }            
            steps{
               script {
                    dir('aks-cluster-infrastructure/') {
                        sh 'terraform validate'
                    }
                }
            }
        }
        
        stage('Terraform Plan') {
            when {
                expression{action == "apply"}
            }
            steps{
               script {
                    dir('aks-cluster-terraform/') {
                        sh 'terraform plan'
                    }
                }
            }            
        }
        stage('Terraform Apply') {
            when {
                expression{action == "apply"}
            }
            steps{
               script {
                    dir('aks-cluster-infrastructure/') {
                        sh 'terraform apply --auto-approve'
                    }
                }
            }              
        }
        stage('Configure Kubectl') {
            when {
                expression{action == "apply"}
            }
            steps {
                script {
                    dir('aks-cluster-infrastructure/') {
                        sh'''
                        az aks get-credentials --resource-group $(terraform output -raw resource_group_name) --name $(terraform output -raw kubernetes_cluster_name)             
                        kubectl get nodes
                        '''
                    }
                }
            }
            
        }        
        stage('Installing Helm Chart') {
            when {
                expression{action == "apply"}
            }
            steps{
                sh'''   
                helm list
                # helm repo add bitnami https://charts.bitnami.com/bitnami
                # helm install $CHART_NAME bitnami/nginx                
                '''
            }
        }
        stage('Verify Deployments') {
            when {
                expression{action == "apply"}
            }
            steps{
                sh'''                
                kubectl get pods
                kubectl get deployments
                kubectl get services
                
                echo "Waiting for end point..."
                sleep 10
                EXTERNAL_IP=$(kubectl get svc $CHART_NAME -o yaml | grep -oP '(?<=ip: )[0-9].+')
                echo 'End point ready:' && echo $EXTERNAL_IP
                echo "URL: http://$EXTERNAL_IP"
                '''
            }
        }

        stage("Terraform destroy"){
            when {
                expression{action == "destroy"}
            }
            steps {
                script {
                    dir('aks-cluster-infrastructure/') {
                        sh 'terraform destroy --auto-approve'
                    }
                }
            }
        }

    }

    
}